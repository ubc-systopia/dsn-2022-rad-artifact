syntax = "proto3";

// package middlebox;

service Middlebox {
  // Get info about all serial devices connected to the computer
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse) {}

  // Get a list of COM port strings for connected serial devices
  rpc ListDevicePorts(ListDevicePortsRequest) returns (ListDevicePortsResponse) {}

  // Get a list of device serial numbers for connected FTDI devices
  rpc ListDeviceSerials(LisDevicetSerialsRequest) returns (ListDeviceSerialsResponse) {}

  // Initialize a connection to the specified serial device
  rpc Initialize(InitializeRequest) returns (InitializeResponse) {}

  // Open the specified serial device
  rpc OpenDevice(OpenDeviceRequest) returns (OpenDeviceResponse) {}

  // Connect to the specified serial device if a connection hasn't been made
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}

  // Disconnect the specified serial device
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {}

  // Change the serial connection parameters for the specified serial device
  rpc SetParameters(SetParametersRequest) returns (SetParametersResponse) {}

  // Update timeouts for the specified serial device
  rpc UpdateTimeouts(UpdateTimeoutsRequest) returns (UpdateTimeoutsResponse) {}

  // Get info about the specified serial device
  rpc Info(InfoRequest) returns (InfoResponse) {}

  // Get the serial number of the specified serial device
  rpc SerialNumber(SerialNumberRequest) returns (SerialNumberResponse) {}

  // Get the number of bytes waiting in the input buffer
  rpc InWaiting(InWaitingRequest) returns (InWaitingResponse) {}

  // Get the number of bytes waiting in the output buffer
  rpc OutWaiting(OutWaitingRequest) returns (OutWaitingResponse) {}
  
  // Get the read timeout
  rpc ReadTimeout(ReadTimeoutRequest) returns (ReadTimeoutResponse) {}

  // Set the read timeout
  rpc SetReadTimeout(SetReadTimeoutRequest) returns (SetReadTimeoutResponse) {}

  // Get the write timeout
  rpc WriteTimeout(WriteTimeoutRequest) returns (WriteTimeoutResponse) {}

  // Set the write timeout
  rpc SetWriteTimeout(SetWriteTimeoutRequest) returns (SetWriteTimeoutResponse) {}

  // Read bytes from the specified serial device
  rpc Read(ReadRequest) returns (ReadResponse) {}

  // Read a "line" of data from the specifiedserial device until the given line ending is found
  rpc ReadLine(ReadLineRequest) returns (ReadLineResponse) {}

  // Write the given data to the specified serial device
  rpc Write(WriteRequest) returns (WriteResponse) {}

  // Perform a "request", which writes the given data and then reads the
  // "response" from the serial device until the given line ending is found
  rpc Request(RequestRequest) returns (RequestResponse) {}

  // Flush data from the input and output buffers
  rpc Flush(FlushRequest) returns (FlushResponse) {}

  // Flush / reset data in the input buffer
  rpc ResetInputBuffer(ResetInputBufferRequest) returns (ResetInputBufferResponse) {}
  
  // Flush / reset data in the output buffer
  rpc ResetOutputBuffer(ResetOutputBufferRequest) returns (ResetOutputBufferResponse) {}
  
  // Enable or disable bit-bang mode on FTDI devices
  rpc SetBitMode(SetBitModeRequest) returns (SetBitModeResponse) {}
}

message ListDevicesRequest {
  MO mo = 1;
  ListDevicesResponse response = 2;
}

message ListDevicesResponse {
  repeated SerialDeviceInfo devices_info = 1;
}

message ListDevicePortsRequest {
  MO mo = 1;
  ListDevicePortsResponse response = 2;
}

message ListDevicePortsResponse {
  repeated string ports = 1;
}

message LisDevicetSerialsRequest {
  MO mo = 1;
  ListDeviceSerialResponse response = 2;
}

message ListDeviceSerialsResponse {
  repeated string serial_numbers = 1;
}

message InitializeRequest {
  MO mo = 1;
  InitializeResponse response = 2;

  // On the server and client side, we expect to have only one class instance
  // per device connection, and therefore multiple instances of the
  // VirtualSerial class, but all these instances communicate using a single
  // gRPC service, the Middlebox; thus, in addition all the existing
  // method parameters, I am adding an extra device_id parameter, which
  // identifies the class instances on both sides;
  // we do this for all device-specific methods
  int32 device_id = 3;

  SerialDeviceType device_type = 4;

  // If the string is empty, replace with None in Python
  string device_serial = 5;

  // If the string is empty, replace with None in Python,
  // otherwise, cast into a Python integer
  // (and vice versa when encoding)
  string device_number = 6;

  // If the string is empty, replace with None in Python
  string device_port = 7;

  int32 baudrate = 8;
  int32 parity = 9;
  int32 stop_bits = 10;
  int32 data_bits = 11;
  float read_timeout = 12;
  float write_timeout = 13;
  float connect_timeout = 14;
  bool connect_retry = 15;
  float connect_settle_time = 16;
  bool connect = 17;
}

message InitializeResponse {
}

message OpenDevice {
  Mo mo = 1;
  OpenDeviceResponse = 2;
  int32 device_id = 3;
}

message OpenDeviceResponse {
}

message ConnectRequest {
  MO mo = 1;
  ConnectResponse response = 2;
  int32 device_id = 3;
}

message ConnectResponse {
}

message DisconnectRequest {
  CommunicationsMode mo = 1;
  DisconnectResponse response = 2;
  int32 device_id = 3;
}

message DisconnectResponse {
}

message SetParametersRequest {
  CommunicationsMode mo = 1;
  SetParametersResponse response = 2;
  int32 device_id = 3;

  // If any of these strings is empty, replace it with None in Python,
  // and for each string that is not empty, cast it into a Python integer;
  // only set those parameters that are not None
  string baudrate = 4;
  string parity = 5;
  string stop_bits = 6;
  string data_bits = 7;
}

message SetParametersResponse {
}

message UpdateTimeoutsRequest {
  CommunicationsMode mo = 1;
  UpdateTimeoutsResponse response = 2;
  int32 device_id = 3;
}

message UpdateTimeoutsResponse {
}

message InfoRequest {
  CommunicationsMode mo = 1;
  InfoResponse response = 2;
  int32 device_id = 3;
}

message InfoResponse {
  SerialDeviceInfo device_info = 1;
}

message SerialNumberRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message SerialNumberResponse {
  // If the string is empty, replace with None in Python
  string device_serial = 1;
}

message InWaitingRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message InWaitingResponse {
  int32 num_bytes = 1;
}

message OutWaitingRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message OutWaitingResponse {
  int32 num_bytes = 1;
}

message ReadTimeoutRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message ReadTimeoutResponse {
  float timeout = 1;
}

message SetReadTimeoutRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
  float timeout = 4;
}

message SetReadTimeoutResponse {
}

message WriteTimeoutRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message WriteTimeoutResponse {
  float timeout = 1;
}

message SetWriteTimeoutRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
  float timeout = 4;
}

message SetWriteTimeoutResponse {
}

message ReadRequest {
  CommunicationsMode mo = 1;
  ReadResponse response = 2;
  int32 device_id = 3;

  // If the string is empty, replace with None in Python,
  // otherwise, cast into a Python integer
  string num_bytes = 2;

  // If the string is empty, replace with None in Python,
  // otherwise, cast into a Python float
  string timeout = 5;
}

message ReadResponse {
  bytes data = 1;
}

message ReadLineRequest {
  CommunicationsMode mo = 1;
  ReadLiineResponse response = 2;
  int32 device_id = 3;

  bytes line_ending = 4;

  // If the string is empty, replace with None in Python,
  // otherwise, cast into a Python float
  string timeout = 5;
}

message ReadLineResponse {
  bytes data = 1;
}

message WriteRequest {
  CommunicationsMode mo = 1;
  WriteResponse response = 2;
  int32 device_id = 3;

  enum Format {
    STRING = 0;
    BYTES = 1;
  }
  Format data_format = 4;
  string data = 5;

  // If the string is empty, replace with None in Python,
  // otherwise, cast into a Python float
  string timeout = 6;
}

message WriteResponse {
  int32 num_bytes = 1;
}

message RequestRequest {
  CommunicationsMode mo = 1;
  RequestResponse response = 2;
  int32 device_id = 3;

  bytes data = 4;

  // If the string is empty, replace with None in Python,
  // otherwise, cast into a Python float
  string timeout = 5;

  bytes line_ending = 6;
}

message RequestResponse {
  bytes data = 1;
}

message FlushRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message FlushResponse {
}

message ResetInputBufferRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message ResetInputBufferResponse {
}

message ResetOutputBufferRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
}

message ResetOutputBufferResponse {
}

message SetBitModeRequest {
  CommunicationsMode mo = 1;
  SerialNumberResponse response = 2;
  int32 device_id = 3;
  int32 mask = 4;
  bool enable = 5;
}

message SetBitModeResponse {
}

message SerialDeviceType {
  enum Format {
    INT = 0;
    STRING = 1;
  }
  Format device_type_format = 1;

  // If the string is empty, replace with None in Python,
  // otherwise, parse it as per the format field
  string device_type = 2;
}

message SerialDeviceInfo {
  // If the string is empty, replace with None in Python,
  // otherwise, cast into a Python integer
  string index = 1;

  // If the string is empty, leave it as it is
  string serial = 2;

  // If the string is empty, replace with None in Python
  string port = 3;

  // If the string is empty, replace with None in Python
  string description = 4;
}

enum MO {
  DIRECT_SERIAL = 0;
  DIRECT_MIDDLEBOX = 1;
  DIRECT_SERIAL_WITH_MIDDLEBOX_TRACING = ;
}
