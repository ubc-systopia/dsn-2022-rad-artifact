syntax = "proto3";

service Niraapad {

  // Used for all static and class methods
  rpc StaticMethod(StaticMethodReq) returns (StaticMethodResp) {}

  // Used for all static and class methods
  rpc StaticMethodTrace(StaticMethodTraceMsg) returns (EmptyMsg) {}

  // Used for all static and class variable read access
  rpc StaticGetter(StaticGetterReq) returns (StaticGetterResp) {}

  // Used for all static and class variable read access
  rpc StaticGetterTrace(StaticGetterTraceMsg) returns (EmptyMsg) {}

  // Used for all static and class variable write access
  rpc StaticSetter(StaticSetterReq) returns (StaticSetterResp) {}

  // Used for all static and class variable write access
  rpc StaticSetterTrace(StaticSetterTraceMsg) returns (EmptyMsg) {}

  // Used for the __init__ method of class Serial
  rpc Initialize(InitializeReq) returns (InitializeResp) {}

  // Used for the __init__ method of class Serial
  rpc InitializeTrace(InitializeTraceMsg) returns (EmptyMsg) {}

  // Used for property getters
  rpc GenericGetter(GenericGetterReq) returns (GenericGetterResp) {}

  // Used for property getters
  rpc GenericGetterTrace(GenericGetterTraceMsg) returns (EmptyMsg) {}

  // Used for property setters
  rpc GenericSetter(GenericSetterReq) returns (GenericSetterResp) {}

  // Used for property setters
  rpc GenericSetterTrace(GenericSetterTraceMsg) returns (EmptyMsg) {}

  // Used for the remaining methods
  rpc GenericMethod(GenericMethodReq) returns (GenericMethodResp) {}

  // Used for the remaining methods
  rpc GenericMethodTrace(GenericMethodTraceMsg) returns (EmptyMsg) {}
}

message StaticMethodReq {
  string backend_type = 1;
  string method_name = 2;
  bytes args = 3;
  bytes kwargs = 4;
}

message StaticMethodResp {
  bytes exception = 1;
  bytes resp = 2;
}

message StaticMethodTraceMsg {
  StaticMethodReq req = 1;
  StaticMethodResp resp = 2;
}

message StaticGetterReq {
  string backend_type = 1;
  string property_name = 2;
}

message StaticGetterResp {
  bytes exception = 1;
  bytes resp = 2;
}

message StaticGetterTraceMsg {
  StaticGetterReq req = 1;
  StaticGetterResp resp = 2;
}

message StaticSetterReq {
  string backend_type = 1;
  string property_name = 2;
  bytes value = 3;
}

message StaticSetterResp {
  bytes exception = 1;
}

message StaticSetterTraceMsg {
  StaticSetterReq req = 1;
  StaticSetterResp resp = 2;
}

message InitializeReq {
  string backend_type = 1;
  int32 backend_instance_id = 2;
  bytes args = 3;
  bytes kwargs = 4;
}

message InitializeResp {
  bytes exception = 1;
}

message InitializeTraceMsg {
  InitializeReq req = 1;
  InitializeResp resp = 2;
}

message GenericGetterReq {
  string backend_type = 1;
  int32 backend_instance_id = 2;
  string property_name = 3;
}

message GenericGetterResp {
  bytes exception = 1;
  bytes resp = 2;
}

message GenericGetterTraceMsg {
  GenericGetterReq req = 1;
  GenericGetterResp resp = 2;
}

message GenericSetterReq {
  string backend_type = 1;
  int32 backend_instance_id = 2;
  string property_name = 3;
  bytes value = 4;
}

message GenericSetterResp {
  bytes exception = 1;
}

message GenericSetterTraceMsg {
  GenericSetterReq req = 1;
  GenericSetterResp resp = 2;
}

message GenericMethodReq {
  string backend_type = 1;
  int32 backend_instance_id = 2;
  string method_name = 3;
  bytes args = 4;
  bytes kwargs = 5;
}

message GenericMethodResp {
  bytes exception = 1;
  bytes resp = 2;
}

message GenericMethodTraceMsg {
  GenericMethodReq req = 1;
  GenericMethodResp resp = 2;
}

// Trace header helps identify the trace length
message TraceHeader {
    // number of bytes in the following trace metadata
    int32 metadata_size = 1;
}

// Trace metadata helps identify the trace message type and its size
message TraceMetadata {
  string timestamp = 1;
  string trace_msg_type = 2;

  // number of bytes in the following trace msg
  // i.e., any message type above ending in "TraceMsg"
  int32 trace_msg_size = 3;
}

// Since gRPC does not allow defining RPC with void params / return values
message EmptyMsg {
}
